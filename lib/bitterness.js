// Generated by CoffeeScript 1.10.0
(function() {
  var convert, mashAdjustment, ragerIbu, ragerUtilisation, tanh, tinsethIbu, tinsethMgl, tinsethUtilisation;

  convert = require('./convert');

  tinsethUtilisation = function(og, boilTime) {
    var bignessFactor, boilTimeFactor, utilisation;
    boilTimeFactor = (1 - Math.exp(-0.04 * boilTime)) / 4.15;
    bignessFactor = 1.65 * Math.pow(0.000125, og - 1);
    utilisation = bignessFactor * boilTimeFactor;
    return utilisation;
  };

  tinsethMgl = function(weight, alphaAcid, batchSize) {
    alphaAcid = alphaAcid / 100;
    return (alphaAcid * weight * 1000) / batchSize;
  };

  tinsethIbu = function(mgl, utilisation) {
    return utilisation * mgl;
  };

  tanh = function(x) {
    var e;
    e = Math.exp(2 * x);
    return (e - 1) / (e + 1);
  };

  ragerUtilisation = function(boilTime) {
    return (18.11 + 13.86 * tanh((boilTime - 31.32) / 18.27)) / 100;
  };

  ragerIbu = function(weight, utilisation, alphaAcid, boilVolume, boilGravity) {
    var ga;
    ga = 0;
    alphaAcid = alphaAcid / 100;
    if (boilGravity > 1.050) {
      ga = (boilGravity - 1.050) / 0.2;
    }
    return (weight * utilisation * alphaAcid * 1000) / (boilVolume * (1 + ga));
  };

  mashAdjustment = function(aa) {
    return aa * 0.2;
  };

  module.exports = {
    available: function() {
      var available;
      available = Object.keys(this);
      available.splice(available.indexOf('available'), 1);
      return available;
    },
    rager: function(hopObj) {
      var ibu, mgl, utilisation;
      hopObj.boilGravity = hopObj.boilGravity || 1.000;
      utilisation = ragerUtilisation(hopObj.boilTime);
      mgl = tinsethMgl(hopObj.amount, hopObj.aa, hopObj.boilVolume);
      ibu = ragerIbu(hopObj.amount, utilisation, hopObj.aa, hopObj.boilVolume, hopObj.boilGravity);
      return {
        ibu: ibu,
        utilisation: utilisation,
        mgl: mgl
      };
    },
    tinseth: function(hopObj) {
      var ibu, mgl, utilisation;
      hopObj.boilGravity = hopObj.boilGravity || 1.000;
      mgl = tinsethMgl(hopObj.amount, hopObj.aa, hopObj.boilVolume);
      utilisation = tinsethUtilisation(hopObj.boilGravity, hopObj.boilTime);
      ibu = tinsethIbu(utilisation, mgl);
      return {
        ibu: ibu,
        utilisation: utilisation,
        mgl: mgl
      };
    }
  };

}).call(this);
