// Generated by CoffeeScript 1.10.0
(function() {
  var Decimal, _, convert;

  convert = require('./convert');

  _ = {
    isNaN: require('lodash.isnan')
  };

  Decimal = require('decimal.js');

  Decimal.config({
    'errors': false
  });

  module.exports = {
    available: function() {
      var available;
      available = Object.keys(this);
      available.splice(available.indexOf('available'), 1);
      available.splice(available.indexOf('calc'), 1);
      return available;
    },
    miller: function(og, fg) {
      var calc;
      calc = new Decimal(og).minus(fg).div(0.75).times(100);
      if (calc.isNaN()) {
        calc = new Decimal(0);
      }
      return calc.toNumber();
    },
    fix: null,
    simple: function(og, fg) {
      var calc;
      calc = new Decimal(og).minus(fg).times(131.25);
      if (calc.isNaN()) {
        calc = new Decimal(0);
      }
      return calc.toNumber();
    },
    alternativeSimple: function(og, fg) {
      var calc;
      calc = ((1.05 / 0.79) * ((og - fg) / fg)) * 100;
      if (_.isNaN(calc)) {
        calc = 0;
      }
      return +calc.toFixed(2);
    },
    advanced: function(og, fg) {
      var calc;
      calc = (og - fg) * (100.3 * (og - fg) + 125.65);
      if (_.isNaN(calc)) {
        calc = 0;
      }
      return +calc.toFixed(2);
    },
    alternativeAdvanced: function(og, fg) {
      var calc;
      calc = (76.08 * (og - fg) / (1.775 - og)) * (fg / 0.794);
      if (_.isNaN(calc)) {
        calc = 0;
      }
      return +calc.toFixed(2);
    },
    microbrewit: function(og, fg) {
      var calc;
      calc = (this.alternativeSimple(og, fg) + this.alternativeAdvanced(og, fg) + this.simple(og, fg) + this.advanced(og, fg) + this.miller(og, fg)) / 5;
      if (_.isNaN(calc)) {
        calc = 0;
      }
      return +calc.toFixed(2);
    },
    calc: function(og, fg, formula) {
      var calc;
      if (!this[formula]) {
        formula = 'microbrewit';
      }
      calc = this[formula](og, fg);
      if (!_.isNaN(calc)) {
        return calc;
      } else {
        return 0;
      }
    }
  };

}).call(this);
